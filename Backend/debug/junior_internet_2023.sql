--
-- Script was generated by Devart dbForge Studio 2022 for MySQL, Version 9.1.100.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 3/15/2023 12:49:10 AM
-- Server version: 8.0.32
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

DROP DATABASE IF EXISTS junior_internet_2023;

CREATE DATABASE junior_internet_2023
CHARACTER SET utf8mb4
COLLATE utf8mb4_0900_ai_ci;

--
-- Set default database
--
USE junior_internet_2023;

--
-- Create table `family`
--
CREATE TABLE family (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  name varchar(50) DEFAULT NULL,
  email varchar(50) NOT NULL,
  archive tinyint(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 22,
AVG_ROW_LENGTH = 5461,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci;

--
-- Create table `user`
--
CREATE TABLE user (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  family_id int UNSIGNED NOT NULL,
  login varchar(255) NOT NULL,
  password varchar(255) NOT NULL,
  role int UNSIGNED NOT NULL,
  balance float NOT NULL,
  first_name varchar(50) NOT NULL,
  last_name varchar(255) NOT NULL,
  archive tinyint(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 21,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci;

--
-- Create index `login` on table `user`
--
ALTER TABLE user
ADD UNIQUE INDEX login (login, family_id);

--
-- Create foreign key
--
ALTER TABLE user
ADD CONSTRAINT FK_user_family_id FOREIGN KEY (family_id)
REFERENCES family (id);

--
-- Create table `task_list`
--
CREATE TABLE task_list (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  family_id int UNSIGNED NOT NULL,
  user_id int UNSIGNED NOT NULL,
  is_mono tinyint(1) NOT NULL DEFAULT 0,
  title varchar(255) NOT NULL,
  description varchar(255) NOT NULL,
  reward float NOT NULL,
  start_date datetime NOT NULL,
  end_date datetime NOT NULL,
  created_at datetime NOT NULL DEFAULT (NOW()),
  archive tinyint(1) NOT NULL DEFAULT 0,
  children_list json DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 30,
AVG_ROW_LENGTH = 1820,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci;

--
-- Create foreign key
--
ALTER TABLE task_list
ADD CONSTRAINT FK_task_list_family_id FOREIGN KEY (family_id)
REFERENCES family (id);

--
-- Create foreign key
--
ALTER TABLE task_list
ADD CONSTRAINT FK_task_list_user_id FOREIGN KEY (user_id)
REFERENCES user (id);

--
-- Create table `user_tasks`
--
CREATE TABLE user_tasks (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  family_id int UNSIGNED NOT NULL,
  child_id int UNSIGNED NOT NULL,
  task_id int UNSIGNED NOT NULL,
  end_task_date datetime NOT NULL,
  child_confirm tinyint(1) NOT NULL DEFAULT 0,
  parent_confirm tinyint(1) NOT NULL DEFAULT 0,
  assign_date datetime NOT NULL DEFAULT (NOW()),
  complete_date datetime DEFAULT NULL,
  verify_date datetime DEFAULT NULL,
  reject_message varchar(255) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 21,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `UK_user_tasks` on table `user_tasks`
--
ALTER TABLE user_tasks
ADD UNIQUE INDEX UK_user_tasks (child_id, task_id);

--
-- Create foreign key
--
ALTER TABLE user_tasks
ADD CONSTRAINT FK_user_tasks_child_id FOREIGN KEY (child_id)
REFERENCES user (id);

--
-- Create foreign key
--
ALTER TABLE user_tasks
ADD CONSTRAINT FK_user_tasks_family_id FOREIGN KEY (family_id)
REFERENCES family (id);

--
-- Create foreign key
--
ALTER TABLE user_tasks
ADD CONSTRAINT FK_user_tasks_task_id FOREIGN KEY (task_id)
REFERENCES task_list (id);

--
-- Create table `expenses`
--
CREATE TABLE expenses (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  child_id int UNSIGNED NOT NULL,
  title varchar(255) NOT NULL,
  category varchar(255) NOT NULL,
  amount float NOT NULL,
  created_at datetime NOT NULL DEFAULT (NOW()),
  archive tinyint(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 22,
AVG_ROW_LENGTH = 1024,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci;

--
-- Create foreign key
--
ALTER TABLE expenses
ADD CONSTRAINT FK_expenses_child_id FOREIGN KEY (child_id)
REFERENCES user (id);

--
-- Create table `balance_log`
--
CREATE TABLE balance_log (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  user_id int UNSIGNED NOT NULL,
  task_id int UNSIGNED DEFAULT NULL,
  user_task_id int UNSIGNED DEFAULT NULL,
  expense_id int UNSIGNED DEFAULT NULL,
  value float NOT NULL,
  balance float NOT NULL,
  comment varchar(255) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 16,
AVG_ROW_LENGTH = 3276,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE balance_log
ADD CONSTRAINT FK_balance_log_expense_id FOREIGN KEY (expense_id)
REFERENCES expenses (id);

--
-- Create foreign key
--
ALTER TABLE balance_log
ADD CONSTRAINT FK_balance_log_task_id FOREIGN KEY (task_id)
REFERENCES task_list (id);

--
-- Create foreign key
--
ALTER TABLE balance_log
ADD CONSTRAINT FK_balance_log_user_id FOREIGN KEY (user_id)
REFERENCES user (id);

--
-- Create foreign key
--
ALTER TABLE balance_log
ADD CONSTRAINT FK_balance_log_user_task_id FOREIGN KEY (user_task_id)
REFERENCES user_tasks (id);

DELIMITER $$

--
-- Create trigger `BalanceLog_after_NewExpense`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER BalanceLog_after_NewExpense
AFTER INSERT
ON expenses
FOR EACH ROW
BEGIN

  SET @balance = (SELECT
      balance
    FROM user
    WHERE id = NEW.child_id);

  INSERT INTO balance_log (user_id, expense_id, value, balance, comment)
    VALUES (NEW.child_id, NEW.id, -NEW.amount, @balance - NEW.amount, NEW.title);
  UPDATE user
  SET balance = @balance - NEW.amount
  WHERE id = NEW.child_id;
END
$$

--
-- Create trigger `BalanceLog_after_CompletedTask`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER BalanceLog_after_CompletedTask
AFTER UPDATE
ON user_tasks
FOR EACH ROW
BEGIN

  SET @balance = (SELECT
      balance
    FROM user
    WHERE id = NEW.child_id);

  INSERT INTO balance_log (user_id, task_id, user_task_id, value, balance, comment)
    SELECT
      NEW.child_id,
      NEW.task_id,
      NEW.id,
      tl.reward,
      @balance + tl.reward,
      "Completed Task"
    FROM task_list tl
    WHERE tl.id = NEW.task_id
    AND NEW.parent_confirm = 1;
  UPDATE user
  SET balance = balance + (SELECT
      reward
    FROM task_list tl
    WHERE tl.id = NEW.task_id);
END
$$

DELIMITER ;

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;